syntax = "proto2";

package hourai.db.proto;

import "hourai/db/proto/action.proto";
import "hourai/db/proto/auto_config.proto";
import "hourai/db/proto/escalation.proto";
import "hourai/db/proto/util.proto";

message GuildConfig {
  optional LoggingConfig logging = 1;
  optional VerificationConfig verification = 2;
  optional AutoConfig auto = 3;
  optional ModerationConfig moderation = 4;
  optional MusicConfig music = 5;
  optional AnnouncementConfig announce = 6;
  optional RoleConfig role = 7;
}

// ------------------------------------------------------------------------------
// Logging Configs
// ------------------------------------------------------------------------------

message LoggingConfig {
  // Required. The channel to make modlog messages to.
  optional uint64 modlog_channel_id = 1;

  optional MessageLoggingConfig deleted_messages = 3;
  optional MessageLoggingConfig edited_messages = 4;

  reserved 2;
}

message MessageLoggingConfig {
  optional bool enabled = 1;
  optional uint64 output_channel_id = 2;
  optional IdFilter channel_filter = 3;
}

// ------------------------------------------------------------------------------
// Moderation Configs
// ------------------------------------------------------------------------------

message ModerationConfig {
  optional EscalationLadder escalation_ladder = 1;
  optional MessageFilterOptions message_filter  = 2;
}

message MessageFilterOptions {
  // Rules are applied in order and only one rule will apply to a given message.
  // Either the first applicable rule will be applied or none will apply at all.
  repeated MessageFilterRule rules = 1;
}

message MessageFilterRule {
  // The name of the rule
  optional string name = 1;

  // Actually required. Criteria for triggering the rule.
  optional Criteria criteria = 2;

  // If set to true (the default), the message will be deleted.
  optional bool delete_message = 3 [default = true];
  // If set to true (the default), a moderator will be notified of the message
  // via modlog.
  optional bool notify_moderator = 4 [default = true];
  // Optional: additional actions to take on the author of the message. Actions
  // are applied sequentially and will all be applied even if earlier actions are
  // unsuccessful.
  repeated Action additional_actions = 5;

  message Criteria {
    // All of the following criteria are applied conjunctively, meaning all of
    // them need to be satisfied for the rule to be used.

    // A list of regexes. Triggers if any of them match the message content.
    repeated string matches = 1;

    // If set to true, triggers if the message content includes anything from a
    // globally managed list of slurs.
    optional bool includes_slurs = 2;

    // If set, triggers if the message includes a Discord invite link.
    optional bool includes_invite_links = 3;

    // If set to true, this exempts the user from the rule if the user is a
    // moderator. Defaults to true.
    optional bool exclude_moderators = 4 [default = true];

    // If set to true, this exempts the user from the rule if the user is a
    // bot. Defaults to true.
    optional bool exclude_bots = 5 [default = true];

    // Channel IDs where the rule does not apply.
    repeated uint64 excluded_channels = 6;

    // Triggers based on the number of mentions in a given message.
    optional MentionFilterCriteria mentions = 7;

    // Triggers based on the embeds or attachments in a given message.
    optional EmbedFilterCriteria embeds = 8;
  }
}

message MentionFilterCriteria {
  message MentionLimits {
    // One of the following must be speciified.
    //
    // maximum_total: an upper limit uses the total raw count
    // maximum_unique: an upper limit that uses the count of unique mentions.
    optional uint32 maximum_total = 1;
    optional uint32 maximum_unique = 2;
  }

  // Limits that apply to any mention, and uses the total number of mentions
  // across all categories.
  optional MentionLimits any_mention = 1;
  optional MentionLimits user_mention = 2;
  optional MentionLimits role_mention = 3;
}

message EmbedFilterCriteria {
  // The maximum number of unique embeds or attachments that can be included for
  // the criteria to be met.
  optional uint32 max_embed_count = 1;
}

// ------------------------------------------------------------------------------
// Music Configs
// ------------------------------------------------------------------------------

message MusicConfig {
  // The volume the music bot operates at.
  optional uint32 volume = 1 [default = 100];
  // DEPRECATED: Use RoleSettings.settings.permissions
  // Optional: If set, people who can DJ the bot need to have this role.
  // Otherwise, moderators by default have the permission.
  repeated uint64 dj_role_id = 2 [packed = true];
  // Optional: If set, the music bot wil only join that voice channel.
  // Otherwise, the bot will join the first caller's current voice channel.
  optional uint64 voice_channel_id = 3;
  // Optional: If set, music commands will only work in the specified channels.
  repeated uint64 text_channel_id = 4 [packed = true];
}

// ------------------------------------------------------------------------------
// Music Configs
// ------------------------------------------------------------------------------

message AnnouncementConfig {
  optional AnnouncementTypeConfig joins = 1;
  optional AnnouncementTypeConfig leaves = 2;
  optional AnnouncementTypeConfig bans = 3;
  optional AnnouncementTypeConfig streams = 4;
  optional AnnouncementTypeConfig voice = 5;
}

message AnnouncementTypeConfig {
  // Required. The channels to output the announcements to.
  repeated uint64 channel_ids = 1 [packed = true];
  // Optional: Custom messages used. If none are provided, the default message
  // will be used.
  repeated string messages = 2;
}

// ------------------------------------------------------------------------------
// Verification Configs
// ------------------------------------------------------------------------------

message VerificationConfig {
  // If set to true, verification as a whole is enabled.
  optional bool enabled = 1;

  // Optional: The role to use for verification. If not set, no role will be
  // given.
  optional uint64 role_id = 2;

  // Optional: If set, unvalildated users are kicked after the number of seconds
  // passes. Minimum value is 1 hour (3600 seconds).
  optional uint64 kick_unvalidated_users_after = 3;

  // Optional: If set, accounts under the age, in seconds, will be rejected.
  optional uint64 minimum_account_age = 4 [default = 2592000];

  // If true (the default), pings a moderator upon failing to verify a new join.
  optional bool ping_moderator_on_fail = 8 [default = true];

  // Unix time for lifting a lockdown. If the time has already passed or if it's
  // not present, the server is no longer under lockdown.
  optional uint64 lockdown_expiration = 9;

  // Optional: aspect specific configurations. If not set, the default values are
  // used.
  optional AvatarVerificationConfig avatar = 5;
  optional UsernameVerificationConfig username = 6;
  optional CrossGuildVerificationConfig cross_server = 7;
}

message AvatarVerificationConfig {
  optional bool reject_default_avatars = 1 [default = true];
  // TODO(james7132): Enable this when adding further avatar verification.
  //optional bool reject_sexual_avatars = 1 [default = true];
  //optional bool reject_violent_avatars = 1 [default = true];
}

message UsernameVerificationConfig {
  // Optional: The blacklist applies first. If any matches, the user is rejected,
  // unless the any entry in the whitelist applies. Both are lists of regexes.
  optional FilterSettings username_filter = 1;

  optional bool reject_sexual_usernames = 2 [default = true];
  optional bool reject_offensive_usernames = 3 [default = true];
  optional bool reject_likely_user_bots = 4 [default = true];
}

message CrossGuildVerificationConfig {
  // Optional: If set to true, users banned from other servers
  optional bool reject_banned_users = 1 [default = true];
  // Optional: This marks the minimum size of other servers to check against. If
  // not set, the default of 150 users is used. This
  optional uint64 minimum_guild_size = 2 [default = 150];
  // TODO(james7132): Update this when the Discord Hotline integration is
  // available.
  // optional bool reject_hotline_reported_users = 3 [default = true];
}

// ------------------------------------------------------------------------------
// Role Configs
// ------------------------------------------------------------------------------
message RoleConfig {
  // DEPRECATED: Use setting.permissions
  // Optional: The IDs of the roles that normal users can request whenever.
  repeated uint64 self_serve_role_ids = 1 [packed = true];
  // Settings for each role, keyed by role ID
  map<uint64, RoleSettings> settings = 2;
}

message RoleSettings {
  // Bitfield:
  //  0 - DJ role
  //  1 - Moderator
  //  2 - Restorable
  optional uint64 flags = 1;
}
